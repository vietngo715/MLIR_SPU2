
# Get source
mkdir mlir-toy
cd mlir-toy
git clone https://github.com/vietngo715/MLIR_SPU2.git
cd MLIR_SPU2
export TOY_ROOT=`pwd`
mkdir build;cd build
#Build llvm and mlir using Ninja.
# configure
cmake  -G Ninja -DLLVM_ENABLE_PROJECTS="llvm;mlir" -DCMAKE_BUILD_TYPE=Release ../llvm
# -j for parallel build option
cmake --build . -j 8
#
#Build llvm and mlir without Ninja --> slow
#cmake  -DLLVM_ENABLE_PROJECTS="llvm;mlir" -DCMAKE_BUILD_TYPE=Release ../llvm
#cmake --build . 

## Build standaloneToy
cd $TOY_ROOT/standaloneToy
./build.sh
#Test
cat test/matmul.toy 
def main() {
  var a = [[1, 2, 3], [4, 5, 6]];
  var b = [[1, 2], [3, 4], [5, 6]];
  var c = matmul(a, b);
  var v = wvprod(a, b);
  print(c);
}

./build/bin/toyc test/matmul.toy

#Expected output:

module  {
  func @main() {
    %0 = toy.constant dense<[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]> : tensor<2x3xf64>
    %1 = toy.constant dense<[[1.000000e+00, 2.000000e+00], [3.000000e+00, 4.000000e+00], [5.000000e+00, 6.000000e+00]]> : tensor<3x2xf64>
    %2 = "toy.matmul"(%0, %1) : (tensor<2x3xf64>, tensor<3x2xf64>) -> tensor<*xf64>
    %3 = "toy.WVProd"(%0, %1) : (tensor<2x3xf64>, tensor<3x2xf64>) -> tensor<*xf64>
    toy.print %2 : tensor<*xf64>
    toy.return
  }
}

